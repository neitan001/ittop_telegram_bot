import requests
import json
from datetime import datetime, timedelta
import pytz  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
import logging
from config import SCHEDULE_URL, USER_AGENT, ORIGIN, REFERER

USER_DATA_FILE = "users.json"
MOSCOW_TZ = pytz.timezone("Europe/Moscow")  # –ú–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å

class MoscowTimeFormatter(logging.Formatter):
    def formatTime(self, record, datefmt=None):
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
        tz_aware_time = datetime.fromtimestamp(record.created, tz=MOSCOW_TZ)
        return tz_aware_time.strftime(datefmt or self.default_time_format)

def get_user_token(user_id):
    try:
        with open('users.json', 'r') as f:
            tokens = json.load(f)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
        user_data = tokens.get(str(user_id))
        if user_data and 'token' in user_data:
            return user_data['token']  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω
        else:
            return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
        
    except FileNotFoundError:
        print("–§–∞–π–ª users.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None
    except json.JSONDecodeError:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON.")
        return None
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return None

def remove_user_token(user_id):
    username = get_username(user_id)
    try:
        with open('users.json', 'r') as f:
            tokens = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if str(user_id) in tokens:
            # –û–±–Ω—É–ª—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            tokens[str(user_id)]["token"] = ""
            # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
            with open('users.json', 'w') as f:
                json.dump(tokens, f, indent=4)
            logger.info(f"–¢–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –æ–±–Ω—É–ª—ë–Ω.")
        else:
            logger.warning(f"–¢–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except FileNotFoundError:
        logger.error("–§–∞–π–ª —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except KeyError:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}.")

def get_username(user_id):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username) –ø–æ user_id –∏–∑ —Ñ–∞–π–ª–∞ users.json.
    """
    try:
        with open(USER_DATA_FILE, "r", encoding="utf-8") as file:
            user_data = json.load(file)
        return user_data.get(str(user_id), {}).get("username", f"User_{user_id}")
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª {USER_DATA_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return f"User_{user_id}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_FORMAT = "%(asctime)s - %(levelname)s - %(message)s"
DATE_FORMAT = "%Y-%m-%d %H:%M:%S"

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
console_handler = logging.StreamHandler()
console_handler.setFormatter(MoscowTimeFormatter(LOG_FORMAT, DATE_FORMAT))

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
logging.basicConfig(level=logging.INFO, handlers=[console_handler])
logging.getLogger("urllib3").setLevel(logging.WARNING)
logging.getLogger("telegram").setLevel(logging.WARNING)
logging.getLogger("httpx").setLevel(logging.WARNING)

# –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

def get_headers(user_id):
    username = get_username(user_id)
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}.")
    user_data = load_user_data()
    token = user_data.get(str(user_id), {}).get("token")
    if token is None:
        logger.error(f"–¢–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        raise ValueError("–¢–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    headers = {
        "Authorization": f"Bearer {token}",
        "User-Agent": USER_AGENT,
        "Accept": "application/json",
        "Content-Type": "application/json",
        "Origin": ORIGIN,
        "Referer": REFERER,
    }
    logger.debug(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã.")
    return headers

def load_user_data():
    try:
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞.")
        with open(USER_DATA_FILE, "r", encoding="utf-8") as file:
            data = json.load(file)
            logger.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
            return data
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}

def fetch_schedule(date, user_id):
    from bot import start
    from bot import handle_date_request
    username = get_username(user_id)
    logger.info(f"–ó–∞–ø—Ä–æ—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –Ω–∞ –¥–∞—Ç—É {date}.")
    url = SCHEDULE_URL.format(date)
    headers = get_headers(user_id)
    
    try:
        response = requests.get(url, headers=headers)
        
        # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É 401, –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ, —É–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        if response.status_code == 401:
            logger.error(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}. –¢–æ–∫–µ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
            remove_user_token(user_id)  # –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω
            handle_date_request(update = Update, context = ContextTypes.DEFAULT_TYPE, invalid_token=True)
            raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")
        
        logger.info(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {username} –Ω–∞ {date} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n")
        return response
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {username} –Ω–∞ {date}: {e}")
        return None


def format_schedule(schedule_info, date):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å
    day_of_week = datetime.strptime(date, "%Y-%m-%d").weekday()  # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    if day_of_week == 5 or day_of_week == 6:  # –°—É–±–±–æ—Ç–∞ (5) –∏–ª–∏ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (6)
        logger.info(f"–î–µ–Ω—å {date} - –≤—ã—Ö–æ–¥–Ω–æ–π.\n")
        return "–í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å. –ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."

    if not schedule_info:
        logger.warning("–ù–µ –ø–æ–ª—É—á–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –ø–∞—Ä –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.")
        return "–ù–µ—Ç –ø–∞—Ä –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å."
    
    logger.debug("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
    formatted_schedule = ""
    for entry in schedule_info:
        time_start = entry.get("started_at", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        time_end = entry.get("finished_at", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        subject = entry.get("subject_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
        room = entry.get("room_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è")
        teacher = entry.get("teacher_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
        
        formatted_schedule += (
            f"üïí {time_start} - {time_end} üïí\n"
            f"üìñ {subject}\n"
            f"üö™ {room}\n"
            f"üë®‚Äçüè´ {teacher}\n\n"
        )
    logger.debug("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ.")
    return formatted_schedule

def get_schedule(date, user_id):
    username = get_username(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    try:
        datetime.strptime(date, "%Y-%m-%d")
    except ValueError:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {date}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD.")
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD.")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    response = fetch_schedule(date, user_id)
    
    if response is None:
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π (None), —Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –Ω–∞ {date}.")
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {username} –Ω–∞ {date}. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
    
    try:
        schedule_info = response.json()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç JSON
    except ValueError:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –Ω–∞ {date}. –û—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.")
        raise ValueError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –û—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.")
    
    return format_schedule(schedule_info, date)  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏


def get_today_schedule(user_id):
    username = get_username(user_id)
    date = datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d")  # –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –¥–∞—Ç–∞
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}.")
    return get_schedule(date, user_id)

def get_tomorrow_schedule(user_id):
    username = get_username(user_id)
    date = (datetime.now(MOSCOW_TZ) + timedelta(days=1)).strftime("%Y-%m-%d")  # –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –¥–∞—Ç–∞
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}.")
    return get_schedule(date, user_id)

def get_week_schedule(user_id):
    username = get_username(user_id)
    start_of_week = datetime.now(MOSCOW_TZ) - timedelta(days=datetime.now(MOSCOW_TZ).weekday())
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}.")
    week_schedule = ""
    for i in range(5):  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ü—è—Ç–Ω–∏—Ü–∞
        date = (start_of_week + timedelta(days=i)).strftime("%Y-%m-%d")
        day_name = get_day_name_in_russian((start_of_week + timedelta(days=i)).weekday())
        schedule_info = fetch_schedule(date, user_id).json()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        formatted_schedule = format_schedule(schedule_info) if schedule_info else "–ù–µ—Ç –ø–∞—Ä"
        week_schedule += f"üìÖ {day_name} ({date}):\n{formatted_schedule}\n"
    logger.info(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –ø–æ–ª—É—á–µ–Ω–æ.")
    return week_schedule

def get_next_week_schedule(user_id):
    username = get_username(user_id)
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
    today = datetime.now(MOSCOW_TZ)
    days_until_next_monday = (7 - today.weekday()) % 7 + 7  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
    start_of_next_week = today + timedelta(days=days_until_next_monday)
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}.")
    next_week_schedule = ""
    
    for i in range(5):  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ü—è—Ç–Ω–∏—Ü–∞
        date = (start_of_next_week + timedelta(days=i)).strftime("%Y-%m-%d")
        day_name = get_day_name_in_russian((start_of_next_week + timedelta(days=i)).weekday())
        schedule_info = fetch_schedule(date, user_id).json()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        formatted_schedule = format_schedule(schedule_info, date) if schedule_info else "–ù–µ—Ç –ø–∞—Ä"
        next_week_schedule += f"üìÖ {day_name} ({date}):\n{formatted_schedule}\n"
    
    logger.info(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –ø–æ–ª—É—á–µ–Ω–æ.")
    return next_week_schedule

def get_day_name_in_russian(day_index):
    days_in_russian = {
        0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        1: "–í—Ç–æ—Ä–Ω–∏–∫",
        2: "–°—Ä–µ–¥–∞",
        3: "–ß–µ—Ç–≤–µ—Ä–≥",
        4: "–ü—è—Ç–Ω–∏—Ü–∞",
        5: "–°—É–±–±–æ—Ç–∞",
        6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    }
    return days_in_russian.get(day_index, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å")